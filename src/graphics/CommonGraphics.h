/*
 * Copyright Benjamin Wang 2014.
 * 
 * This source code may not be distributed, or used for any commercial or non-commerical   
 * purposes, without the written of Benjamin Wang or Darcy McGee. This includes, without
 * exception, any modified versions of this source code.
 * This copyright notice may not be removed.
 */

#pragma once
#ifndef _WNTR_COMMONGRAPHICS_H_
#define _WNTR_COMMONGRAPHICS_H_

#include <stdexcept>

namespace wntr {

	enum class API {
		OPENGL,
	};
	
	enum class API_VERSION {
		UNKNOWN,
		OPENGL33,
		OPENGL40,
		OPENGL41,
		OPENGL42,
		OPENGL43,
		OPENGL44,
	};

	enum class USAGE {
		DEFAULT,
		MUTABLE,
		IMMUTABLE,
	};

	enum class POLYGON_TYPE {
		POINT,
		LINE,
		TRIANGLE,
	};

	enum ATTRIBUTE {
		ATTRIBUTE_POSITION, ATTRIBUTE_POSITION2,
		ATTRIBUTE_COLOR, ATTRIBUTE_COLOR2,
		ATTRIBUTE_NORMAL, ATTRIBUTE_NORMAL2,
		ATTRIBUTE_TANGENT, ATTRIBUTE_TANGENT2,
		ATTRIBUTE_BITANGENT, ATTRIBUTE_BITANGENT2,
		ATTRIBUTE_WEIGHTS, ATTRIBUTE_WEIGHTS2,
		ATTRIBUTE_GROUPS, ATTRIBUTE_GROUPS2,
		ATTRIBUTE_UV, ATTRIBUTE_UV2,
		ATTRIBUTE_UVW, ATTRIBUTE_UVW2,

		ATTRIBUTE_ELEMENTS,
		ATTRIBUTE_OTHER,
	};
	typedef int attribute_id;

	enum UNIFORM {
		UNIFORM_WORLD,
		UNIFORM_VIEW,
		UNIFORM_PROJECTION,
		UNIFORM_ORTHOGONAL,
		UNIFORM_COLOR,
		UNIFORM_BONES,
		UNIFORM_CAMERA_POSITION,
		UNIFORM_CAMERA_DIRECTION,
		UNIFORM_LIGHT_AMBIENT,
		UNIFORM_LIGHT_COLOR,
		UNIFORM_LIGHT_POSITION,
		UNIFORM_LIGHT_DIRECTION,
		UNIFORM_LIGHT_VIEW,
		UNIFORM_LIGHT_PROJECTION,
		UNIFORM_INSTANCE_WORLD,
		UNIFORM_INSTANCE_COLOR,
		UNIFORM_INSTANCE_LIGHT_COLOR,
		UNIFORM_INSTANCE_LIGHT_POSITION,
		UNIFORM_INSTANCE_LIGHT_DIRECTION,
		UNIFORM_MAT4,
		UNIFORM_FLOAT4,
		UNIFORM_INT4,
		UNIFORM_UINT4,
		UNIFORM_OTHER,
	};
	typedef int uniform_id;

	enum TEXTURE {
		TEXTURE_DIFFUSE, TEXTURE_DIFFUSE2, TEXTURE_DIFFUSE3, TEXTURE_DIFFUSE4, TEXTURE_DIFFUSE5, TEXTURE_DIFFUSE6, TEXTURE_DIFFUSE7, TEXTURE_DIFFUSE8,
		TEXTURE_POSITION, TEXTURE_POSITION2, TEXTURE_POSITION3, TEXTURE_POSITION4, TEXTURE_POSITION5, TEXTURE_POSITION6, TEXTURE_POSITION7, TEXTURE_POSITION8,
		TEXTURE_NORMAL, TEXTURE_NORMAL2, TEXTURE_NORMAL3, TEXTURE_NORMAL4, TEXTURE_NORMAL5, TEXTURE_NORMAL6, TEXTURE_NORMAL7, TEXTURE_NORMAL8,
		TEXTURE_SPECULAR, TEXTURE_SPECULAR2, TEXTURE_SPECULAR3, TEXTURE_SPECULAR4, TEXTURE_SPECULAR5, TEXTURE_SPECULAR6, TEXTURE_SPECULAR7, TEXTURE_SPECULAR8,
		TEXTURE_EMISSIVE, TEXTURE_EMISSIVE2, TEXTURE_EMISSIVE3, TEXTURE_EMISSIVE4, TEXTURE_EMISSIVE5, TEXTURE_EMISSIVE6, TEXTURE_EMISSIVE7, TEXTURE_EMISSIVE8,
		TEXTURE_LIGHT, TEXTURE_LIGHT2, TEXTURE_LIGHT3, TEXTURE_LIGHT4, TEXTURE_LIGHT5, TEXTURE_LIGHT6, TEXTURE_LIGHT7, TEXTURE_LIGHT8,
		TEXTURE_SHADOW, TEXTURE_SHADOW2, TEXTURE_SHADOW3, TEXTURE_SHADOW4, TEXTURE_SHADOW5, TEXTURE_SHADOW6, TEXTURE_SHADOW7, TEXTURE_SHADOW8,
		TEXTURE_OTHER,
	};
	typedef int texture_id;
	typedef int renderbuffer_id;

	enum SAMPLER {
		SAMPLER_DIFFUSE, SAMPLER_DIFFUSE2, SAMPLER_DIFFUSE3, SAMPLER_DIFFUSE4, SAMPLER_DIFFUSE5, SAMPLER_DIFFUSE6, SAMPLER_DIFFUSE7, SAMPLER_DIFFUSE8,
		SAMPLER_POSITION, SAMPLER_POSITION2, SAMPLER_POSITION3, SAMPLER_POSITION4, SAMPLER_POSITION5, SAMPLER_POSITION6, SAMPLER_POSITION7, SAMPLER_POSITION8,
		SAMPLER_NORMAL, SAMPLER_NORMAL2, SAMPLER_NORMAL3, SAMPLER_NORMAL4, SAMPLER_NORMAL5, SAMPLER_NORMAL6, SAMPLER_NORMAL7, SAMPLER_NORMAL8,
		SAMPLER_SPECULAR, SAMPLER_SPECULAR2, SAMPLER_SPECULAR3, SAMPLER_SPECULAR4, SAMPLER_SPECULAR5, SAMPLER_SPECULAR6, SAMPLER_SPECULAR7, SAMPLER_SPECULAR8,
		SAMPLER_EMISSIVE, SAMPLER_EMISSIVE2, SAMPLER_EMISSIVE3, SAMPLER_EMISSIVE4, SAMPLER_EMISSIVE5, SAMPLER_EMISSIVE6, SAMPLER_EMISSIVE7, SAMPLER_EMISSIVE8,
		SAMPLER_LIGHT, SAMPLER_LIGHT2, SAMPLER_LIGHT3, SAMPLER_LIGHT4, SAMPLER_LIGHT5, SAMPLER_LIGHT6, SAMPLER_LIGHT7, SAMPLER_LIGHT8,
		SAMPLER_SHADOW, SAMPLER_SHADOW2, SAMPLER_SHADOW3, SAMPLER_SHADOW4, SAMPLER_SHADOW5, SAMPLER_SHADOW6, SAMPLER_SHADOW7, SAMPLER_SHADOW8,
		SAMPLER_OTHER,
	};
	typedef int sampler_id;

	enum class FORMAT {
		BYTE, BYTE2, BYTE3, BYTE4,
		UBYTE, UBYTE2, UBYTE3, UBYTE4,
		SHORT, SHORT2, SHORT3, SHORT4,
		USHORT, USHORT2, USHORT3, USHORT4,
		INT, INT2, INT3, INT4,
		UINT, UINT2, UINT3, UINT4,
		FLOAT, FLOAT2, FLOAT3, FLOAT4,
	};

	enum class TEXTURE_FORMAT {
		UNKNOWN,

		R_UBYTE,
		RGB_UBYTE,
		BGR_UBYTE,
		RGBA_UBYTE,
		BGRA_UBYTE,

		R_FLOAT16,
		RGB_FLOAT16,
		BGR_FLOAT16,
		RGBA_FLOAT16,
		BGRA_FLOAT16,

		R_FLOAT32,
		RGB_FLOAT32,
		BGR_FLOAT32,
		RGBA_FLOAT32,
		BGRA_FLOAT32,

		DEPTH24,
		DEPTH24_STENCIL8,
		DEPTH32,
		DEPTH32_STENCIL8,
	};

	enum class TEXTURE_EDGE {
		CLAMP,
		CLAMP_BORDER,
		REPEAT,
		REPEAT_MIRRORED,
	};

	enum class COMPARISON {
		EQUAL,
		NOT_EQUAL,
		LESSER,
		GREATER,
		LESSER_EQUAL,
		GREATER_EQUAL,
		ALWAYS,
		NEVER,
	};

	enum class FILTER {
		NEAREST,
		LINEAR,
		NEAREST_MIPMAP_NEAREST,
		NEAREST_MIPMAP_LINEAR,
		LINEAR_MIPMAP_NEAREST,
		LINEAR_MIPMAP_LINEAR,
	};

	enum class STENCIL_OP {
		KEEP,
		ZERO,
		REPLACE,
		INC_SAT,
		DEC_SAT,
		INVERT,
		INC,
		DEC,
	};
	struct STENCIL {
		STENCIL_OP spass_dpass;
		STENCIL_OP spass_dfail;
		STENCIL_OP sfail;
		COMPARISON comparison;
	};

	enum class BLEND_OP {
		ADD,
		SUB,
		REV_SUB,
		MIN,
		MAX,
	};

	enum class BLEND_FUNC {
		ZERO,
		ONE,
		SRC_COLOR,
		INV_SRC_COLOR,
		SRC_ALPHA,
		INV_SRC_ALPHA,
		DEST_ALPHA,
		INV_DEST_ALPHA,
		DEST_COLOR,
		INV_DEST_COLOR,
		SRC_ALPHA_SAT,
		BLEND_FACTOR,
		INV_BLEND_FACTOR,
		SRC1_COLOR,
		INV_SRC1_COLOR,
		SRC1_ALPHA,
		INV_SRC1_ALPHA,
	};

	unsigned sizeOfFormat(FORMAT format);

}

#endif